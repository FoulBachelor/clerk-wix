#+TITLE: Clerk.io Pixel and Widget Injection for Wix
#+AUTHOR: Alexander Bugge Stage
#+EMAIL: abs@clerk.io

#+DESCRIPTION: Guide document for implementing Clerk.io in Wix's React based WYSIWYG editor.
#+KEYWORDS: wix, clerk.io, ecommerce, personalization, search, recommendations, embedcode, injection
#+LANGUAGE: en

* Structure and Design

The Wix editor is made using React, and likewise the frontend for it also renders the site using React components.
This poses a few restrictions in terms of data acccess while also imposing limits on how you can interact with information on the page.

As a result the code for Clerk is segmented in 4 main sections:

- Affiliate tracking script.
_{ Clerk.js, located in a field outside the Editor or Theme. }

- Utility functions.
_{ Utility function library located in the Theme ~public~ resource. }

- Custom element scripts.
_{ A number of custom-element.js files located in the Theme ~public/custom-elements~ resource.  }

- Element hydration scripts.
_{ A number of snippets placed in the appropriate controllers page.js file which hydrate elements with contextual data before hydration. }

* Affiliate Tracking Script

This script loads the Clerk.js library and class into the window. This is needed for all pages, to be loaded once in the header.

~clerk.js~ \\
_{ makes ~Clerk(**args)~ available in window scope. }
#+BEGIN_SRC html
<script>
(function(w,d){
    const CLERK_INIT_CLASS = 'clerk_manual';
    w.clerk_init_class = CLERK_INIT_CLASS;
    var e=d.createElement('script');e.type='text/javascript';e.async=true;
    e.src=(d.location.protocol=='https:'?'https':'http')+'://cdn.clerk.io/clerk.js';
    var s=d.getElementsByTagName('script')[0];s.parentNode.insertBefore(e,s);
    w.__clerk_q=w.__clerk_q||[];w.Clerk=w.Clerk||function(){ w.__clerk_q.push(arguments) };
})(window,document);

Clerk('config', {
    key: 'PUBLIC_API_KEY'
});
</script>
#+END_SRC


* Utility Functions

In order to keep the setup organized all functions used to retrieve contextual data, are stored in ~public/clerk-wix.js~ .

These functions are imported in the element hydration scripts, in order to populate data before Clerk initialization.

** Data Retrieval

~clerkGetCart()~ \\
_{ gets cart object, contex anywhere. }
#+BEGIN_SRC js
export const clerkGetCart = async () => {
    const currentCart = await cart.getCurrentCart();
    const cartInfo = { cartId: currentCart._id, cartLineItems: currentCart.lineItems }
    return cartInfo;
}
#+END_SRC

~clerkGetCartProducts()~ \\
_{ gets product ids in cart, contex anywhere. }
#+BEGIN_SRC js
export const clerkGetCartProducts = async () => {
	const cart = await clerkGetCart();
    const product_ids = cart.cartLineItems.map(line_item => {
        return line_item?.productId;
    });
	return product_ids;
}
#+END_SRC

~clerkGetQuery()~ \\
_{ gets value of q param if present, contex anywhere. }
#+BEGIN_SRC js
export const clerkGetQuery = (wixLocation) => {
	return wixLocation.query['q'];
}
#+END_SRC

~clerkGetProduct()~ \\
_{ gets the current product id, context product page. }
#+BEGIN_SRC js
export const clerkGetProduct = async () => {
	const product = await $w('#productPage1').getProduct();
	return product?._id;
}
#+END_SRC

~clerkGetOrder()~ \\
_{ gets the current order, context thank you page. }
#+BEGIN_SRC js
export const clerkGetOrder = async () => {
	const order = await $w('#thankYouPage1').getOrder();
	return order;
}
#+END_SRC

** Document Manipulation

~clerkHydrateBasketTracking()~ \\
_{ hydrates basket tracking, context anywhere. }
#+BEGIN_SRC js
export const clerkHydrateBasketTracking = async (selector_list=['']) => {
	const product_ids = await clerkGetCartProducts();
	selector_list.forEach(el => {
		if($w(el).length !== 0){
			$w(el).setAttribute('data-products', product_ids);
		}
	});
}
#+END_SRC

~clerkHydrateSalesTracking()~ \\
_{ hydrates sales tracking, context thank you page. }
#+BEGIN_SRC js
export const clerkHydrateSalesTracking = async (selector_list=['']) => {
    const order_details = await clerkGetOrder();
	const order_products = order_details.lineItems.map(line_item => {
		return {id: line_item.productId, quantity: line_item.quantity, price: line_item.tax + line_item.priceData.price}
	});
	selector_list.forEach(el => {
        if($w(el).length !== 0){
            $w(el).setAttribute('data-sale', order_details._id);
            $w(el).setAttribute('data-email', order_details.buyerInfo.email);
            $w(el).setAttribute('data-products', order_products);
        }
	});
}
#+END_SRC

~clerkHydrateCartSlider()~ \\
_{ hydrates slider with product ids in cart, context anywhere. }
#+BEGIN_SRC js
export const clerkHydrateCartSlider = async (selector_list=['']) => {
    const product_ids = await clerkGetCartProducts();
	selector_list.forEach(el => {
		if($w(el).length !== 0){
			$w(el).setAttribute('data-products', `${JSON.stringify(product_ids)}`);
		}
	});
}
#+END_SRC

~clerkHydrateProductSlider()~ \\
_{ hydrates slider with current product id, context product page. }
#+BEGIN_SRC js
export const clerkHydrateProductSlider = async (selector_list=['']) => {
    const product_id = await clerkGetProduct();
	selector_list.forEach(el => {
		if($w(el).length !== 0){
			$w(el).setAttribute('data-products', `["${product_id}"]`);
		}
	});
}
#+END_SRC

~clerkHydrateSearchPage()~ \\
_{ hydrates search page with query, context search page. }
#+BEGIN_SRC js
export const clerkHydrateSearchPage = (selector_list=[''], wixLocation) => {
    const query = clerkGetQuery(wixLocation);
    selector_list.forEach(el => {
        if($w(el).length !== 0){
            $w(el).setAttribute('data-query', query);
        }
	});
}
#+END_SRC

* Components

* Implementation

* Debugging

* References